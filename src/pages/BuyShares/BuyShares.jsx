import React, { useRef, useState } from "react";
import s from "./BuyShares.module.scss";
import Button from "../../components/Button/Button";
import ButtonReturnConteiner from "../../components/ButtonReturn/ButtonReturnConteiner";
import HeaderText from "../../components/HeaderText/HeaderText";
import SelectionButtom from "../../components/SelectionButtom/SelectionButtom";
import { useNavigate } from "react-router-dom";

function BuyShares(props) {
	const navigate = useNavigate();
	const addShares = () => {
		const purchaseCost = valueVoucher * wantToBuy;

		if (purchaseCost > totalCost) {
			const maxAffordableUnits = Math.floor(totalCost / valueVoucher);
			const message = `‚ö†Ô∏è –°—É–º–∞ –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–≤–∏—â—É—î –¥–æ—Å—Ç—É–ø–Ω–∏–π –±—é–¥–∂–µ—Ç.

üí∞ –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏ –ª–∏—à–µ: ${maxAffordableUnits} –æ–¥–∏–Ω–∏—Ü—å
üíµ –¶—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é: $${valueVoucher}
üìâ –í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –±—é–¥–∂–µ—Ç: $${maxAffordableUnits * valueVoucher}

‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É?
‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –¥—ñ—é?`;

			const isConfirmed = window.confirm(message);

			if (isConfirmed) {
				props.addSharesThunks(selectedButton, maxAffordableUnits, valueVoucher, totalCost);
				return maxAffordableUnits;
			} else {
				return 0; // –∞–±–æ null, —è–∫—â–æ —Ö–æ—á–µ—à
			}
		} else {
			const message = `–í–∏ –æ–±—Ä–∞–ª–∏ ${wantToBuy} –æ–¥–∏–Ω–∏—Ü—å –Ω–∞ —Å—É–º—É ${purchaseCost}. –ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –ø–æ–∫—É–ø–∫—É.`;
			const isConfirmed = window.confirm(message);

			if (isConfirmed) {
				props.addSharesThunks(selectedButton, wantToBuy, valueVoucher, totalCost);
				navigate("/SaleShares");
				return wantToBuy;

			} else {
				return 0;
			}
		}
	};
	// props.addSharesThunks(selectedButton, wantToBuy, valueVoucher, totalCost);

	// –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ—ó –∫–Ω–æ–ø–∫–∏
	const [selectedButton, setSelectedButton] = useState("");
	const [wantToBuy, setWantToBuy] = useState("");
	const [valueVoucher, setValueVoucher] = useState("");
	const [totalCost, setTotalCost] = useState("");
	// –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ—ó –∫–Ω–æ–ø–∫–∏

	const handleButtonClick = (buttonName) => {
		setSelectedButton(buttonName);
	};

	const valueVoucherRef = useRef(null); // –†–µ—Ñ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ–Ω–ø—É—Ç—É
	const wantToBuyRef = useRef(null); // –†–µ—Ñ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ–Ω–ø—É—Ç—É
	const totalCostRef = useRef(null); // –†–µ—Ñ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ–Ω–ø—É—Ç—É

	const handleClickValueVoucherRef = () => {
		if (valueVoucherRef.current) {
			valueVoucherRef.current.focus(); // –§–æ–∫—É—Å—É—î–º–æ —ñ–Ω–ø—É—Ç
		}
	};
	const handleClickWantToBuyRef = () => {
		if (wantToBuyRef.current) {
			wantToBuyRef.current.focus(); // –§–æ–∫—É—Å—É—î–º–æ —ñ–Ω–ø—É—Ç
		}
	};
	const handleClickTotalCostRef = () => {
		if (totalCostRef.current) {
			totalCostRef.current.focus(); // –§–æ–∫—É—Å—É—î–º–æ —ñ–Ω–ø—É—Ç
		}
	};

	const handleChange = (onlyNums, field) => {
		let b = +wantToBuy,
			a = +valueVoucher,
			c = +totalCost;
		if (field === "a") {
			a = onlyNums;
			c = a * b;
		} else if (field === "b") {
			b = onlyNums;
			c = a * b;
		} else if (field === "c") {
			c = onlyNums;
			b = a !== 0 ? c / a : 0;
		}
		// debugger;
		setValueVoucher(isNaN(a) || a === 0 ? "" : a);
		setWantToBuy(isNaN(b) || b === 0 ? "" : Math.round(b));
		setTotalCost(isNaN(c) || c === 0 ? "" : c);
	};

	return (
		<div className={s.wrapper}>
			<ButtonReturnConteiner />

			<HeaderText text="–ü—Ä–∏–¥–±–∞—Ç–∏ –∞–∫—Ü—ñ—ó" />

			<div className={s.contentWrapper}>
				<div className={s.infoWrapper}>
					<div className={s.info}>
						<div className={s.infoText}>–í–∞—Ä—Ç—ñ—Å—Ç—å –≤–∞—É—á–µ—Ä–∞</div>
						<div
							className={s.wrapperInput}
							onClick={handleClickValueVoucherRef}
						>
							<span className={s.dolar}>$</span>

							<span className={`${valueVoucher.length === 0 ? s.placeholder : ""}`}>{valueVoucher}</span>

							<input
								ref={valueVoucherRef}
								className={s.infoNumber}
								type="text"
								value={valueVoucher}
								placeholder="0"
								maxLength={7}
								inputMode="numeric"
								pattern="[0-9]*"
								onInput={(e) => {
									const onlyNums = e.target.value.replace(/[^\d]/g, ""); // –í–∏–¥–∞–ª—è—î –≤—Å–µ, –∫—Ä—ñ–º —Ü–∏—Ñ—Ä
									handleChange(onlyNums, "a"); // –ü–µ—Ä–µ–¥–∞—î–º–æ –æ—á–∏—â–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ —Ç–∏–ø
								}}
								onKeyDown={(e) => {
									if (["e", "E", "-", "+"].includes(e.key)) {
										e.preventDefault(); // –ë–ª–æ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
									}
								}}
							/>
						</div>{" "}
					</div>
					{/* <div className={s.info}>
						<div className={s.infoText}> –ö—ñ–ª—å–∫—ñ—Å—Ç—å</div>
						<div
							className={s.wrapperInput}
							onClick={handleClickCreditRef}
						>

							<span className={`${credit.length === 0 ? s.placeholder : ""}`}>{credit}</span>

							<input
								ref={creditRef}
								className={s.infoNumber}
								type="text"
								value={credit}
								onChange={handleChangeCredit} // –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∏ –∑–º—ñ–Ω—ñ
								placeholder="0"
								maxLength={7}
							/>
						</div>{" "}
					</div> */}
				</div>
				<div className={s.margin}></div>
				<div className={s.type}>
					<SelectionButtom
						text={"–ö–†–°"}
						isSelected={selectedButton === "–ö–†–°"}
						onClick={() => handleButtonClick("–ö–†–°")}
					/>
					<SelectionButtom
						text={"–ö–ß–ì"}
						isSelected={selectedButton === "–ö–ß–ì"}
						onClick={() => handleButtonClick("–ö–ß–ì")}
					/>
					<SelectionButtom
						text={"–£–ö–¢"}
						isSelected={selectedButton === "–£–ö–¢"}
						onClick={() => handleButtonClick("–£–ö–¢")}
					/>
					<SelectionButtom
						text={"–î–†"}
						isSelected={selectedButton === "–î–†"}
						onClick={() => handleButtonClick("–î–†")}
					/>
					<SelectionButtom
						text={"–Ø–ö–•–ó"}
						isSelected={selectedButton === "–Ø–ö–•–ó"}
						onClick={() => handleButtonClick("–Ø–ö–•–ó")}
					/>
				</div>

				<div className={s.paddingTop}></div>
				<div className={s.border}></div>
				<div className={s.paddingBottom}></div>

				<div className={s.infoWrapper}>
					<div className={s.info}>
						<div className={s.infoText}>–•–æ—á—É –ø—Ä–∏–¥–±–∞—Ç–∏</div>
						<div
							className={s.wrapperInput}
							onClick={handleClickWantToBuyRef}
						>
							<span className={`${wantToBuy.length === 0 ? s.placeholder : ""}`}>{wantToBuy}</span>

							<input
								ref={wantToBuyRef}
								className={s.infoNumber}
								type="text"
								value={wantToBuy}
								placeholder="0"
								maxLength={7}
								inputMode="numeric"
								pattern="[0-9]*"
								onInput={(e) => {
									const onlyNums = e.target.value.replace(/[^\d]/g, ""); // –í–∏–¥–∞–ª—è—î –≤—Å–µ, –∫—Ä—ñ–º —Ü–∏—Ñ—Ä
									handleChange(onlyNums, "b"); // –ü–µ—Ä–µ–¥–∞—î–º–æ –æ—á–∏—â–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ —Ç–∏–ø
								}}
								onKeyDown={(e) => {
									if (["e", "E", "-", "+"].includes(e.key)) {
										e.preventDefault(); // –ë–ª–æ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
									}
								}}
							/>
						</div>{" "}
					</div>
					<div className={s.info}>
						<div className={s.infoText}> –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å</div>
						<div
							className={s.wrapperInput}
							onClick={handleClickTotalCostRef}
						>
							<span className={s.dolar}>$</span>

							<span className={`${totalCost.length === 0 ? s.placeholder : ""}`}>{totalCost}</span>

							<input
								ref={totalCostRef}
								className={s.infoNumber}
								type="text"
								value={totalCost}
								placeholder="0"
								maxLength={7}
								inputMode="numeric"
								pattern="[0-9]*"
								onInput={(e) => {
									const onlyNums = e.target.value.replace(/[^\d]/g, ""); // –í–∏–¥–∞–ª—è—î –≤—Å–µ, –∫—Ä—ñ–º —Ü–∏—Ñ—Ä
									handleChange(onlyNums, "c"); // –ü–µ—Ä–µ–¥–∞—î–º–æ –æ—á–∏—â–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è —ñ —Ç–∏–ø
								}}
								onKeyDown={(e) => {
									if (["e", "E", "-", "+"].includes(e.key)) {
										e.preventDefault(); // –ë–ª–æ–∫—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
									}
								}}
							/>
						</div>
					</div>
				</div>
			</div>
			<div className={s.marginBottom}></div>

			<Button
				style={{ marginTop: "auto" }}
				name={"–ü—Ä–∏–¥–±–∞—Ç–∏"}
				onClick={addShares}
			/>
		</div>
	);
}

export default BuyShares;
